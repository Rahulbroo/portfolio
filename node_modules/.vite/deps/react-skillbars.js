import {
  require_jsx_runtime
} from "./chunk-XNQGYQRN.js";
import {
  __toESM,
  require_react
} from "./chunk-SA4Q2NBN.js";

// node_modules/react-skillbars/dist/esm/index.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var a = function() {
  return a = Object.assign || function(t2) {
    for (var n2, r2 = 1, i2 = arguments.length; r2 < i2; r2++)
      for (var e2 in n2 = arguments[r2])
        Object.prototype.hasOwnProperty.call(n2, e2) && (t2[e2] = n2[e2]);
    return t2;
  }, a.apply(this, arguments);
};
var l = function() {
  function t2() {
  }
  return t2.isString = function(t3) {
    return "[object String]" === Object.prototype.toString.call(t3);
  }, t2.isNumber = function(t3) {
    return "[object Number]" === Object.prototype.toString.call(t3);
  }, t2.getHSL = function(n2, r2, i2) {
    var e2 = function(n3) {
      return t2.isNumber(n3) ? n3 : n3.minimum + r2 * (n3.maximum - n3.minimum) / i2;
    }, o2 = e2(n2.hue), a2 = e2(n2.saturation), l2 = e2(n2.level);
    return "hsl(".concat(o2, ", ").concat(a2, "%, ").concat(l2, "%)");
  }, t2.getHeight = function(n2) {
    return t2.isString(n2) ? n2 : "".concat(n2, "px");
  }, t2;
}();
!function(t2, n2) {
  void 0 === n2 && (n2 = {});
  var r2 = n2.insertAt;
  if (t2 && "undefined" != typeof document) {
    var i2 = document.head || document.getElementsByTagName("head")[0], e2 = document.createElement("style");
    e2.type = "text/css", "top" === r2 && i2.firstChild ? i2.insertBefore(e2, i2.firstChild) : i2.appendChild(e2), e2.styleSheet ? e2.styleSheet.cssText = t2 : e2.appendChild(document.createTextNode(t2));
  }
}(":root {\n  --skillBarTextColor: #ffffff;\n  --skillBarBgColor: #eee;\n  --skillBarTitleBgColor: #d35400;\n  --skillBarBg: #e67e22;\n}\n\n.skillbar {\n  position:relative;\n  display:block;\n  margin-bottom:15px;\n  width:100%;\n  background: var(--skillBarBgColor);\n  border-radius: 3px;\n  -moz-border-radius:3px;\n  -webkit-border-radius:3px;\n  -webkit-transition:0.4s linear;\n  -moz-transition:0.4s linear;\n  -ms-transition:0.4s linear;\n  -o-transition:0.4s linear;\n  transition:0.4s linear;\n  -webkit-transition-property:width, background-color;\n  -moz-transition-property:width, background-color;\n  -o-transition-property:width, background-color;\n  transition-property:width, background-color;\n}\n\n.skillbar-title {\n  position:absolute;\n  top:0;\n  left:0;\n  width:110px;\n  font-weight:bold;\n  font-size:13px;\n  color: var(--skillBarTextColor);\n  background: var(--skillBarTitleBgColor);\n  -webkit-border-radius:3px 0 0 4px;\n  -moz-border-radius:3px 0 0 3px;\n  border-radius:3px 0 0 3px;\n  height:inherit;\n}\n\n.skillbar-title span {\n  display:block;\n  background:rgba(0, 0, 0, 0.1);\n  padding:0 20px;\n  height:inherit;\n  line-height:inherit;\n  -webkit-border-top-left-radius:3px;\n  -webkit-border-bottom-left-radius:3px;\n  -moz-border-radius-topleft:3px;\n  -moz-border-radius-bottomleft:3px;\n  border-top-left-radius:3px;\n  border-bottom-left-radius:3px;\n}\n\n.skillbar-bar {\n  height:inherit;\n  position:absolute;\n  left:110px;\n  background: var(--skillBarBg);\n  border-radius: 0 3px 3px 0;\n  -moz-border-radius: 0 3px 3px 0;\n  -webkit-border-radius: 0 3px 3px 0;\n}\n\n.skillbar-percent {\n  position:absolute;\n  right:10px;\n  top:0;\n  font-size:11px;\n  line-height:inherit;\n  color: var(--skillBarTextColor);\n}\n\n.collapsed {\n  width: 0% !important;\n}\n");
var s = function(s2) {
  var c, d = s2.skills, u = s2.colors, b = s2.barBackground, p = void 0 === b ? "transparent" : b, h = s2.offset, f = void 0 === h ? "25px" : h, g = s2.height, m = void 0 === g ? 35 : g, k = s2.symbol, x = void 0 === k ? "%" : k, v = s2.animationDuration, y = void 0 === v ? 3e3 : v, w = s2.animationDelay, B = void 0 === w ? 1e3 : w, S = s2.animationThreshold, C = void 0 === S ? 0.8 : S, T = (0, import_react.useRef)(null), z = (0, import_react.useState)(true), N = z[0], j = z[1], H = function() {
    var t2 = (0, import_react.useState)(true), n2 = t2[0], e2 = t2[1];
    return (0, import_react.useEffect)(function() {
      e2(false);
    }, []), n2;
  }();
  c = function(t2, n2, e2) {
    var o2 = (0, import_react.useState)(null), a2 = o2[0], l2 = o2[1];
    return (0, import_react.useEffect)(function() {
      if (!e2 && t2.current && "function" == typeof IntersectionObserver) {
        var r2 = new IntersectionObserver(function(t3) {
          l2(t3[0]);
        }, n2);
        return r2.observe(t2.current), function() {
          l2(null), r2.disconnect();
        };
      }
      return function() {
      };
    }, [t2.current, n2.threshold, n2.root, n2.rootMargin]), a2;
  }(T, { root: null, rootMargin: f, threshold: C }, H), (0, import_react.useEffect)(function() {
    if (c && c.isIntersecting) {
      var t2 = setTimeout(function() {
        return j(false);
      }, B);
      return function() {
        return clearTimeout(t2);
      };
    }
  }, [c]);
  var O = (0, import_react.useCallback)(function(t2, n2) {
    return t2.color && t2.color.bar && l.isString(t2.color.bar) ? t2.color.bar : u && u.bar ? l.isString(u.bar) ? u.bar : l.getHSL(u.bar, n2, d.length) : "";
  }, []), I = (0, import_react.useCallback)(function(t2, n2, r2) {
    return t2.color && t2.color.title && t2.color.title[r2] && l.isString(t2.color.title[r2]) ? t2.color.title[r2] : u && u.title && u.title[r2] ? l.isString(u.title[r2]) ? u.title[r2] : l.getHSL(u.title[r2], n2, d.length) : "";
  }, []);
  return (0, import_jsx_runtime.jsx)("div", a({ "data-testid": "skillbar/root", ref: T }, { children: d.map(function(r2, i2) {
    return (0, import_jsx_runtime.jsxs)("div", a({ className: "skillbar", "data-testid": "skillbar/container", style: { height: "".concat(l.getHeight(m)), lineHeight: "".concat(l.getHeight(m)), background: p } }, { children: [(0, import_jsx_runtime.jsx)("div", a({ className: "skillbar-title", "data-testid": "skillbar/title", style: { color: "".concat(I(r2, i2, "text")), background: "".concat(I(r2, i2, "background")) } }, { children: (0, import_jsx_runtime.jsx)("span", { children: r2.type }) })), (0, import_jsx_runtime.jsx)("div", { "data-testid": "skillbar/bar", className: "skillbar-bar ".concat(N ? "collapsed" : ""), style: { background: "".concat(O(r2, i2)), width: "calc((100% - 110px) * (".concat(r2.level, " * 0.01))"), transition: "width ".concat(y, "ms ease-in-out") } }), (0, import_jsx_runtime.jsxs)("div", a({ className: "skillbar-percent", "data-testid": "skillbar/percent" }, { children: [r2.level, x] }))] }), r2.type);
  }) }));
};
export {
  s as SkillBar,
  s as default
};
//# sourceMappingURL=react-skillbars.js.map
